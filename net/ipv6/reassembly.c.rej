--- net/ipv6/reassembly.c	2013-01-04 04:01:31.000000000 -0800
+++ net/ipv6/reassembly.c	2013-03-19 04:00:51.000000000 -0700
@@ -13,19 +13,6 @@
  *      2 of the License, or (at your option) any later version.
  */
 
-/*
- *	Fixes:
- *	Andi Kleen	Make it work with multiple hosts.
- *			More RFC compliance.
- *
- *      Horst von Brand Add missing #include <linux/string.h>
- *	Alexey Kuznetsov	SMP races, threading, cleanup.
- *	Patrick McHardy		LRU queue of frag heads for evictor.
- *	Mitsuru KANDA @USAGI	Register inet6_protocol{}.
- *	David Stevens and
- *	YOSHIFUJI,H. @USAGI	Always remove fragment header to
- *				calculate ICV correctly.
- */
 #include <linux/errno.h>
 #include <linux/types.h>
 #include <linux/string.h>
@@ -65,15 +52,12 @@
 #define FRAG6_CB(skb)	((struct ip6frag_skb_cb*)((skb)->cb))
 
 
-/*
- *	Equivalent of ipv4 struct ipq
- */
 
 struct frag_queue
 {
 	struct inet_frag_queue	q;
 
-	__be32			id;		/* fragment id		*/
+	__be32			id;		
 	u32			user;
 	struct in6_addr		saddr;
 	struct in6_addr		daddr;
@@ -98,10 +82,6 @@
 static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev,
 			  struct net_device *dev);
 
-/*
- * callers should be careful not to use the hash value outside the ipfrag_lock
- * as doing so could race with ipfrag_hash_rnd being recalculated.
- */
 unsigned int inet6_hash_frag(__be32 id, const struct in6_addr *saddr,
 			     const struct in6_addr *daddr, u32 rnd)
 {
@@ -158,16 +138,12 @@
 }
 EXPORT_SYMBOL(ip6_frag_init);
 
-/* Destruction primitives. */
 
 static __inline__ void fq_put(struct frag_queue *fq)
 {
 	inet_frag_put(&fq->q, &ip6_frags);
 }
 
-/* Kill fq entry. It is not destroyed immediately,
- * because caller (and someone more) holds reference count.
- */
 static __inline__ void fq_kill(struct frag_queue *fq)
 {
 	inet_frag_kill(&fq->q, &ip6_frags);
@@ -206,15 +182,10 @@
 	IP6_INC_STATS_BH(net, __in6_dev_get(dev), IPSTATS_MIB_REASMTIMEOUT);
 	IP6_INC_STATS_BH(net, __in6_dev_get(dev), IPSTATS_MIB_REASMFAILS);
 
-	/* Don't send error if the first segment did not arrive. */
+	
 	if (!(fq->q.last_in & INET_FRAG_FIRST_IN) || !fq->q.fragments)
 		goto out_rcu_unlock;
 
-	/*
-	   But use as source device on which LAST ARRIVED
-	   segment was received. And do not use fq->dev
-	   pointer directly, device might already disappeared.
-	 */
 	fq->q.fragments->dev = dev;
 	icmpv6_send(fq->q.fragments, ICMPV6_TIME_EXCEED, ICMPV6_EXC_FRAGTIME, 0);
 out_rcu_unlock:
@@ -277,24 +248,15 @@
 						  0));
 	}
 
-	/* Is this the final fragment? */
+	
 	if (!(fhdr->frag_off & htons(IP6_MF))) {
-		/* If we already have some bits beyond end
-		 * or have different end, the segment is corrupted.
-		 */
 		if (end < fq->q.len ||
 		    ((fq->q.last_in & INET_FRAG_LAST_IN) && end != fq->q.len))
 			goto err;
 		fq->q.last_in |= INET_FRAG_LAST_IN;
 		fq->q.len = end;
 	} else {
-		/* Check if the fragment is rounded to 8 bytes.
-		 * Required by the RFC.
-		 */
 		if (end & 0x7) {
-			/* RFC2460 says always send parameter problem in
-			 * this case. -DaveM
-			 */
 			IP6_INC_STATS_BH(net, ip6_dst_idev(skb_dst(skb)),
 					 IPSTATS_MIB_INHDRERRORS);
 			icmpv6_param_prob(skb, ICMPV6_HDR_FIELD,
@@ -302,7 +264,7 @@
 			return -1;
 		}
 		if (end > fq->q.len) {
-			/* Some bits beyond end -> corruption. */
+			
 			if (fq->q.last_in & INET_FRAG_LAST_IN)
 				goto err;
 			fq->q.len = end;
@@ -312,17 +274,13 @@
 	if (end == offset)
 		goto err;
 
-	/* Point into the IP datagram 'data' part. */
+	
 	if (!pskb_pull(skb, (u8 *) (fhdr + 1) - skb->data))
 		goto err;
 
 	if (pskb_trim_rcsum(skb, end - offset))
 		goto err;
 
-	/* Find out which fragments are in front and at the back of us
-	 * in the chain of fragments so far.  We must know where to put
-	 * this fragment, right?
-	 */
 	prev = fq->q.fragments_tail;
 	if (!prev || FRAG6_CB(prev)->offset < offset) {
 		next = NULL;
@@ -331,30 +289,24 @@
 	prev = NULL;
 	for(next = fq->q.fragments; next != NULL; next = next->next) {
 		if (FRAG6_CB(next)->offset >= offset)
-			break;	/* bingo! */
+			break;	
 		prev = next;
 	}
 
 found:
-	/* RFC5722, Section 4, amended by Errata ID : 3089
-	 *                          When reassembling an IPv6 datagram, if
-	 *   one or more its constituent fragments is determined to be an
-	 *   overlapping fragment, the entire datagram (and any constituent
-	 *   fragments) MUST be silently discarded.
-	 */
 
-	/* Check for overlap with preceding fragment. */
+	
 	if (prev &&
 	    (FRAG6_CB(prev)->offset + prev->len) > offset)
 		goto discard_fq;
 
-	/* Look for overlap with succeeding segment. */
+	
 	if (next && FRAG6_CB(next)->offset < end)
 		goto discard_fq;
 
 	FRAG6_CB(skb)->offset = offset;
 
-	/* Insert this fragment in the chain of fragments. */
+	
 	skb->next = next;
 	if (!next)
 		fq->q.fragments_tail = skb;
@@ -372,9 +324,6 @@
 	fq->q.meat += skb->len;
 	atomic_add(skb->truesize, &fq->q.net->mem);
 
-	/* The first fragment.
-	 * nhoffset is obtained from the first fragment, of course.
-	 */
 	if (offset == 0) {
 		fq->nhoffset = nhoff;
 		fq->q.last_in |= INET_FRAG_FIRST_IN;
@@ -398,15 +347,6 @@
 	return -1;
 }
 
-/*
- *	Check if this packet is complete.
- *	Returns NULL on failure by any reason, and pointer
- *	to current nexthdr field in reassembled frame.
- *
- *	It is called with locked fq, and caller must check that
- *	queue is eligible for reassembly i.e. it is not COMPLETE,
- *	the last and the first frames arrived and all the bits are here.
- */
 static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev,
 			  struct net_device *dev)
 {
@@ -417,7 +357,7 @@
 
 	fq_kill(fq);
 
-	/* Make the one we just received the head. */
+	
 	if (prev) {
 		head = prev->next;
 		fp = skb_clone(head, GFP_ATOMIC);
@@ -440,20 +380,17 @@
 	WARN_ON(head == NULL);
 	WARN_ON(FRAG6_CB(head)->offset != 0);
 
-	/* Unfragmented part is taken from the first segment. */
+	
 	payload_len = ((head->data - skb_network_header(head)) -
 		       sizeof(struct ipv6hdr) + fq->q.len -
 		       sizeof(struct frag_hdr));
 	if (payload_len > IPV6_MAXPLEN)
 		goto out_oversize;
 
-	/* Head of list must not be cloned. */
+	
 	if (skb_cloned(head) && pskb_expand_head(head, 0, 0, GFP_ATOMIC))
 		goto out_oom;
 
-	/* If the first fragment is fragmented itself, we split
-	 * it to two chunks: the first with data and paged part
-	 * and the second, holding only fragments. */
 	if (skb_has_frag_list(head)) {
 		struct sk_buff *clone;
 		int i, plen = 0;
@@ -474,8 +411,6 @@
 		atomic_add(clone->truesize, &fq->q.net->mem);
 	}
 
-	/* We have to remove fragment header from datagram and to relocate
-	 * header in order to calculate ICV correctly. */
 	nhoff = fq->nhoffset;
 	skb_network_header(head)[nhoff] = skb_transport_header(head)[0];
 	memmove(head->head + sizeof(struct frag_hdr), head->head,
@@ -504,7 +439,7 @@
 	ipv6_hdr(head)->payload_len = htons(payload_len);
 	IP6CB(head)->nhoff = nhoff;
 
-	/* Yes, and fold redundant checksum back. 8) */
+	
 	if (head->ip_summed == CHECKSUM_COMPLETE)
 		head->csum = csum_partial(skb_network_header(head),
 					  skb_network_header_len(head),
@@ -540,7 +475,7 @@
 
 	IP6_INC_STATS_BH(net, ip6_dst_idev(skb_dst(skb)), IPSTATS_MIB_REASMREQDS);
 
-	/* Jumbo payload inhibits frag. header */
+	
 	if (hdr->payload_len==0)
 		goto fail_hdr;
 
@@ -552,7 +487,7 @@
 	fhdr = (struct frag_hdr *)skb_transport_header(skb);
 
 	if (!(fhdr->frag_off & htons(0xFFF9))) {
-		/* It is not a fragmented frame */
+		
 		skb->transport_header += sizeof(struct frag_hdr);
 		IP6_INC_STATS_BH(net,
 				 ip6_dst_idev(skb_dst(skb)), IPSTATS_MIB_REASMOKS);
