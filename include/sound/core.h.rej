--- include/sound/core.h	2013-01-04 04:01:35.000000000 -0800
+++ include/sound/core.h	2013-03-19 04:00:57.000000000 -0700
@@ -80,61 +77,56 @@
 };
 
 struct snd_device {
-	struct list_head list;		/* list of registered devices */
-	struct snd_card *card;		/* card which holds this device */
-	snd_device_state_t state;	/* state of the device */
-	snd_device_type_t type;		/* device type */
-	void *device_data;		/* device structure */
-	struct snd_device_ops *ops;	/* operations */
+	struct list_head list;		
+	struct snd_card *card;		
+	snd_device_state_t state;	
+	snd_device_type_t type;		
+	void *device_data;		
+	struct snd_device_ops *ops;	
 };
 
 #define snd_device(n) list_entry(n, struct snd_device, list)
 
-/* main structure for soundcard */
 
 struct snd_card {
-	int number;			/* number of soundcard (index to
-								snd_cards) */
+	int number;			
 
-	char id[16];			/* id string of this card */
-	char driver[16];		/* driver name */
-	char shortname[32];		/* short name of this soundcard */
-	char longname[80];		/* name of this soundcard */
-	char mixername[80];		/* mixer name */
-	char components[128];		/* card components delimited with
-								space */
-	struct module *module;		/* top-level module */
-
-	void *private_data;		/* private data for soundcard */
-	void (*private_free) (struct snd_card *card); /* callback for freeing of
-								private data */
-	struct list_head devices;	/* devices */
-
-	unsigned int last_numid;	/* last used numeric ID */
-	struct rw_semaphore controls_rwsem;	/* controls list lock */
-	rwlock_t ctl_files_rwlock;	/* ctl_files list lock */
-	int controls_count;		/* count of all controls */
-	int user_ctl_count;		/* count of all user controls */
-	struct list_head controls;	/* all controls for this card */
-	struct list_head ctl_files;	/* active control files */
-
-	struct snd_info_entry *proc_root;	/* root for soundcard specific files */
-	struct snd_info_entry *proc_id;	/* the card id */
-	struct proc_dir_entry *proc_root_link;	/* number link to real id */
-
-	struct list_head files_list;	/* all files associated to this card */
-	struct snd_shutdown_f_ops *s_f_ops; /* file operations in the shutdown
-								state */
-	spinlock_t files_lock;		/* lock the files for this card */
-	int shutdown;			/* this card is going down */
-	int free_on_last_close;		/* free in context of file_release */
+	char id[16];			
+	char driver[16];		
+	char shortname[32];		
+	char longname[80];		
+	char mixername[80];		
+	char components[128];		
+	struct module *module;		
+
+	void *private_data;		
+	void (*private_free) (struct snd_card *card); 
+	struct list_head devices;	
+
+	unsigned int last_numid;	
+	struct rw_semaphore controls_rwsem;	
+	rwlock_t ctl_files_rwlock;	
+	int controls_count;		
+	int user_ctl_count;		
+	struct list_head controls;	
+	struct list_head ctl_files;	
+
+	struct snd_info_entry *proc_root;	
+	struct snd_info_entry *proc_id;	
+	struct proc_dir_entry *proc_root_link;	
+
+	struct list_head files_list;	
+	struct snd_shutdown_f_ops *s_f_ops; 
+	spinlock_t files_lock;		
+	int shutdown;			
+	int free_on_last_close;		
 	wait_queue_head_t shutdown_sleep;
-	struct device *dev;		/* device assigned to this card */
-	struct device *card_dev;	/* cardX object for sysfs */
+	struct device *dev;		
+	struct device *card_dev;	
 
 #ifdef CONFIG_PM
-	unsigned int power_state;	/* power state */
-	struct mutex power_lock;	/* power lock */
+	unsigned int power_state;	
+	struct mutex power_lock;	
 	wait_queue_head_t power_sleep;
 #endif
 
@@ -176,24 +167,22 @@
 #define snd_power_get_state(card)	({ (void)(card); SNDRV_CTL_POWER_D0; })
 #define snd_power_change_state(card, state)	do { (void)(card); } while (0)
 
-#endif /* CONFIG_PM */
+#endif 
 
 struct snd_minor {
-	int type;			/* SNDRV_DEVICE_TYPE_XXX */
-	int card;			/* card number */
-	int device;			/* device number */
-	const struct file_operations *f_ops;	/* file operations */
-	void *private_data;		/* private data for f_ops->open */
-	struct device *dev;		/* device for sysfs */
+	int type;			
+	int card;			
+	int device;			
+	const struct file_operations *f_ops;	
+	void *private_data;		
+	struct device *dev;		
 };
 
-/* return a device pointer linked to each sound device as a parent */
 static inline struct device *snd_card_get_device_link(struct snd_card *card)
 {
 	return card ? card->card_dev : NULL;
 }
 
-/* sound.c */
 
 extern int snd_major;
 extern int snd_ecards_limit;
