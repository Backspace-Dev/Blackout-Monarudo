--- include/linux/suspend.h	2013-01-04 04:01:32.000000000 -0800
+++ include/linux/suspend.h	2013-03-19 04:00:52.000000000 -0700
@@ -108,104 +30,29 @@
 };
 
 #ifdef CONFIG_SUSPEND
-/**
- * suspend_set_ops - set platform dependent suspend operations
- * @ops: The new suspend operations to set.
- */
 extern void suspend_set_ops(const struct platform_suspend_ops *ops);
 extern int suspend_valid_only_mem(suspend_state_t state);
 
-/**
- * arch_suspend_disable_irqs - disable IRQs for suspend
- *
- * Disables IRQs (in the default case). This is a weak symbol in the common
- * code and thus allows architectures to override it if more needs to be
- * done. Not called for suspend to disk.
- */
 extern void arch_suspend_disable_irqs(void);
 
-/**
- * arch_suspend_enable_irqs - enable IRQs after suspend
- *
- * Enables IRQs (in the default case). This is a weak symbol in the common
- * code and thus allows architectures to override it if more needs to be
- * done. Not called for suspend to disk.
- */
 extern void arch_suspend_enable_irqs(void);
 
 extern int pm_suspend(suspend_state_t state);
-#else /* !CONFIG_SUSPEND */
+#else 
 #define suspend_valid_only_mem	NULL
 
 static inline void suspend_set_ops(const struct platform_suspend_ops *ops) {}
 static inline int pm_suspend(suspend_state_t state) { return -ENOSYS; }
-#endif /* !CONFIG_SUSPEND */
+#endif 
 
-/* struct pbe is used for creating lists of pages that should be restored
- * atomically during the resume from disk, because the page frames they have
- * occupied before the suspend are in use.
- */
 struct pbe {
-	void *address;		/* address of the copy */
-	void *orig_address;	/* original address of a page */
+	void *address;		
+	void *orig_address;	
 	struct pbe *next;
 };
 
-/* mm/page_alloc.c */
 extern void mark_free_pages(struct zone *zone);
 
-/**
- * struct platform_hibernation_ops - hibernation platform support
- *
- * The methods in this structure allow a platform to carry out special
- * operations required by it during a hibernation transition.
- *
- * All the methods below, except for @recover(), must be implemented.
- *
- * @begin: Tell the platform driver that we're starting hibernation.
- *	Called right after shrinking memory and before freezing devices.
- *
- * @end: Called by the PM core right after resuming devices, to indicate to
- *	the platform that the system has returned to the working state.
- *
- * @pre_snapshot: Prepare the platform for creating the hibernation image.
- *	Called right after devices have been frozen and before the nonboot
- *	CPUs are disabled (runs with IRQs on).
- *
- * @finish: Restore the previous state of the platform after the hibernation
- *	image has been created *or* put the platform into the normal operation
- *	mode after the hibernation (the same method is executed in both cases).
- *	Called right after the nonboot CPUs have been enabled and before
- *	thawing devices (runs with IRQs on).
- *
- * @prepare: Prepare the platform for entering the low power state.
- *	Called right after the hibernation image has been saved and before
- *	devices are prepared for entering the low power state.
- *
- * @enter: Put the system into the low power state after the hibernation image
- *	has been saved to disk.
- *	Called after the nonboot CPUs have been disabled and all of the low
- *	level devices have been shut down (runs with IRQs off).
- *
- * @leave: Perform the first stage of the cleanup after the system sleep state
- *	indicated by @set_target() has been left.
- *	Called right after the control has been passed from the boot kernel to
- *	the image kernel, before the nonboot CPUs are enabled and before devices
- *	are resumed.  Executed with interrupts disabled.
- *
- * @pre_restore: Prepare system for the restoration from a hibernation image.
- *	Called right after devices have been frozen and before the nonboot
- *	CPUs are disabled (runs with IRQs on).
- *
- * @restore_cleanup: Clean up after a failing image restoration.
- *	Called right after the nonboot CPUs have been enabled and before
- *	thawing devices (runs with IRQs on).
- *
- * @recover: Recover the platform from a failure to suspend devices.
- *	Called by the PM core if the suspending of devices during hibernation
- *	fails.  This callback is optional and should only be implemented by
- *	platforms which require special recovery actions in that situation.
- */
 struct platform_hibernation_ops {
 	int (*begin)(void);
 	void (*end)(void);
