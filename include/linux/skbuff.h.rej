--- include/linux/skbuff.h	2013-01-04 04:01:30.000000000 -0800
+++ include/linux/skbuff.h	2013-03-19 04:00:51.000000000 -0700
@@ -858,48 +374,21 @@
 	return __pskb_pull_tail(skb, len - skb_headlen(skb)) != NULL;
 }
 
-/**
- *	skb_headroom - bytes at buffer head
- *	@skb: buffer to check
- *
- *	Return the number of bytes of free space at the head of an &sk_buff.
- */
 static inline unsigned int skb_headroom(const struct sk_buff *skb)
 {
 	return skb->data - skb->head;
 }
 
-/**
- *	skb_tailroom - bytes at buffer end
- *	@skb: buffer to check
- *
- *	Return the number of bytes of free space at the tail of an sk_buff
- */
 static inline int skb_tailroom(const struct sk_buff *skb)
 {
 	return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
 }
 
-/**
- *	skb_availroom - bytes at buffer end
- *	@skb: buffer to check
- *
- *	Return the number of bytes of free space at the tail of an sk_buff
- *	allocated by sk_stream_alloc()
- */
 static inline int skb_availroom(const struct sk_buff *skb)
 {
 	return skb_is_nonlinear(skb) ? 0 : skb->avail_size - skb->len;
 }
 
-/**
- *	skb_reserve - adjust headroom
- *	@skb: buffer to alter
- *	@len: bytes to move
- *
- *	Increase the headroom of an empty &sk_buff by reducing the tail
- *	room. This is only allowed for an empty buffer.
- */
 static inline void skb_reserve(struct sk_buff *skb, int len)
 {
 	skb->data += len;
