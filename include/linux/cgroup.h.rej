--- include/linux/cgroup.h	2013-01-04 04:01:30.000000000 -0800
+++ include/linux/cgroup.h	2013-03-19 04:00:51.000000000 -0700
@@ -42,59 +42,35 @@
 
 extern const struct file_operations proc_cgroup_operations;
 
-/* Define the enumeration of all builtin cgroup subsystems */
 #define SUBSYS(_x) _x ## _subsys_id,
 enum cgroup_subsys_id {
 #include <linux/cgroup_subsys.h>
 	CGROUP_BUILTIN_SUBSYS_COUNT
 };
 #undef SUBSYS
-/*
- * This define indicates the maximum number of subsystems that can be loaded
- * at once. We limit to this many since cgroupfs_root has subsys_bits to keep
- * track of all of them.
- */
 #define CGROUP_SUBSYS_COUNT (BITS_PER_BYTE*sizeof(unsigned long))
 
-/* Per-subsystem/per-cgroup state maintained by the system. */
 struct cgroup_subsys_state {
-	/*
-	 * The cgroup that this subsystem is attached to. Useful
-	 * for subsystems that want to know about the cgroup
-	 * hierarchy structure
-	 */
 	struct cgroup *cgroup;
 
-	/*
-	 * State maintained by the cgroup system to allow subsystems
-	 * to be "busy". Should be accessed via css_get(),
-	 * css_tryget() and and css_put().
-	 */
 
 	atomic_t refcnt;
 
 	unsigned long flags;
-	/* ID for this css, if possible */
+	
 	struct css_id __rcu *id;
 };
 
-/* bits in struct cgroup_subsys_state flags field */
 enum {
-	CSS_ROOT, /* This CSS is the root of the subsystem */
-	CSS_REMOVED, /* This CSS is dead */
+	CSS_ROOT, 
+	CSS_REMOVED, 
 };
 
-/*
- * Call css_get() to hold a reference on the css; it can be used
- * for a reference obtained via:
- * - an existing ref-counted reference to the css
- * - task->cgroups for a locked task
- */
 
 extern void __css_get(struct cgroup_subsys_state *css, int count);
 static inline void css_get(struct cgroup_subsys_state *css)
 {
-	/* We don't need to reference count the root state */
+	
 	if (!test_bit(CSS_ROOT, &css->flags))
 		__css_get(css, 1);
 }
@@ -125,185 +92,91 @@
 		__css_put(css, 1);
 }
 
-/* bits in struct cgroup flags field */
 enum {
-	/* Control Group is dead */
+	
 	CGRP_REMOVED,
-	/* Control Group has ever had a child cgroup or a task */
+	
 	CGRP_RELEASABLE,
-	/* Control Group requires release notifications to userspace */
+	
 	CGRP_NOTIFY_ON_RELEASE,
-	/*
-	 * A thread in rmdir() is wating for this cgroup.
-	 */
 	CGRP_WAIT_ON_RMDIR,
-	/*
-	 * Clone cgroup values when creating a new child cgroup
-	 */
 	CGRP_CLONE_CHILDREN,
 };
 
 struct cgroup {
-	unsigned long flags;		/* "unsigned long" so bitops work */
+	unsigned long flags;		
 
-	/*
-	 * count users of this cgroup. >0 means busy, but doesn't
-	 * necessarily indicate the number of tasks in the cgroup
-	 */
 	atomic_t count;
 
-	/*
-	 * We link our 'sibling' struct into our parent's 'children'.
-	 * Our children link their 'sibling' into our 'children'.
-	 */
-	struct list_head sibling;	/* my parent's children */
-	struct list_head children;	/* my children */
+	struct list_head sibling;	
+	struct list_head children;	
 
-	struct cgroup *parent;		/* my parent */
-	struct dentry __rcu *dentry;	/* cgroup fs entry, RCU protected */
+	struct cgroup *parent;		
+	struct dentry __rcu *dentry;	
 
-	/* Private pointers for each registered subsystem */
+	
 	struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];
 
 	struct cgroupfs_root *root;
 	struct cgroup *top_cgroup;
 
-	/*
-	 * List of cg_cgroup_links pointing at css_sets with
-	 * tasks in this cgroup. Protected by css_set_lock
-	 */
 	struct list_head css_sets;
 
-	/*
-	 * Linked list running through all cgroups that can
-	 * potentially be reaped by the release agent. Protected by
-	 * release_list_lock
-	 */
 	struct list_head release_list;
 
-	/*
-	 * list of pidlists, up to two for each namespace (one for procs, one
-	 * for tasks); created on demand.
-	 */
 	struct list_head pidlists;
 	struct mutex pidlist_mutex;
 
-	/* For RCU-protected deletion */
+	
 	struct rcu_head rcu_head;
 
-	/* List of events which userspace want to receive */
+	
 	struct list_head event_list;
 	spinlock_t event_list_lock;
 };
 
-/*
- * A css_set is a structure holding pointers to a set of
- * cgroup_subsys_state objects. This saves space in the task struct
- * object and speeds up fork()/exit(), since a single inc/dec and a
- * list_add()/del() can bump the reference count on the entire cgroup
- * set for a task.
- */
 
 struct css_set {
 
-	/* Reference count */
+	
 	atomic_t refcount;
 
-	/*
-	 * List running through all cgroup groups in the same hash
-	 * slot. Protected by css_set_lock
-	 */
 	struct hlist_node hlist;
 
-	/*
-	 * List running through all tasks using this cgroup
-	 * group. Protected by css_set_lock
-	 */
 	struct list_head tasks;
 
-	/*
-	 * List of cg_cgroup_link objects on link chains from
-	 * cgroups referenced from this css_set. Protected by
-	 * css_set_lock
-	 */
 	struct list_head cg_links;
 
-	/*
-	 * Set of subsystem states, one for each subsystem. This array
-	 * is immutable after creation apart from the init_css_set
-	 * during subsystem registration (at boot time) and modular subsystem
-	 * loading/unloading.
-	 */
 	struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];
 
-	/* For RCU-protected deletion */
+	
 	struct rcu_head rcu_head;
 	struct work_struct work;
 };
 
-/*
- * cgroup_map_cb is an abstract callback API for reporting map-valued
- * control files
- */
 
 struct cgroup_map_cb {
 	int (*fill)(struct cgroup_map_cb *cb, const char *key, u64 value);
 	void *state;
 };
 
-/*
- * struct cftype: handler definitions for cgroup control files
- *
- * When reading/writing to a file:
- *	- the cgroup to use is file->f_dentry->d_parent->d_fsdata
- *	- the 'cftype' of the file is file->f_dentry->d_fsdata
- */
 
 #define MAX_CFTYPE_NAME 64
 struct cftype {
-	/*
-	 * By convention, the name should begin with the name of the
-	 * subsystem, followed by a period
-	 */
 	char name[MAX_CFTYPE_NAME];
 	int private;
-	/*
-	 * If not 0, file mode is set to this value, otherwise it will
-	 * be figured out automatically
-	 */
 	umode_t mode;
 
-	/*
-	 * If non-zero, defines the maximum length of string that can
-	 * be passed to write_string; defaults to 64
-	 */
 	size_t max_write_len;
 
 	int (*open)(struct inode *inode, struct file *file);
 	ssize_t (*read)(struct cgroup *cgrp, struct cftype *cft,
 			struct file *file,
 			char __user *buf, size_t nbytes, loff_t *ppos);
-	/*
-	 * read_u64() is a shortcut for the common case of returning a
-	 * single integer. Use it in place of read()
-	 */
 	u64 (*read_u64)(struct cgroup *cgrp, struct cftype *cft);
-	/*
-	 * read_s64() is a signed version of read_u64()
-	 */
 	s64 (*read_s64)(struct cgroup *cgrp, struct cftype *cft);
-	/*
-	 * read_map() is used for defining a map of key/value
-	 * pairs. It should call cb->fill(cb, key, value) for each
-	 * entry. The key/value pairs (and their ordering) should not
-	 * change between reboots.
-	 */
 	int (*read_map)(struct cgroup *cont, struct cftype *cft,
 			struct cgroup_map_cb *cb);
-	/*
-	 * read_seq_string() is used for outputting a simple sequence
-	 * using seqfile.
-	 */
 	int (*read_seq_string)(struct cgroup *cont, struct cftype *cft,
 			       struct seq_file *m);
 
