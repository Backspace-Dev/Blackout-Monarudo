--- mm/page-writeback.c	2013-01-04 04:01:34.000000000 -0800
+++ mm/page-writeback.c	2013-03-19 04:00:55.000000000 -0700
@@ -105,24 +24,12 @@
 		x += zone_page_state(z, NR_FREE_PAGES) +
 		     zone_reclaimable_pages(z) - z->dirty_balance_reserve;
 	}
-	/*
-	 * Make sure that the number of highmem pages is never larger
-	 * than the number of the total dirtyable memory. This can only
-	 * occur in very strange VM situations but we want to make sure
-	 * that this does not occur.
-	 */
 	return min(x, total);
 #else
 	return 0;
 #endif
 }
 
-/**
- * global_dirtyable_memory - number of globally dirtyable pages
- *
- * Returns the global number of pages potentially available for dirty
- * page cache.  This is the base value for the global dirty limits.
- */
 unsigned long global_dirtyable_memory(void)
 {
 	unsigned long x;
@@ -168,36 +66,13 @@
 	trace_global_dirty_state(background, dirty);
 }
 
-/**
- * zone_dirtyable_memory - number of dirtyable pages in a zone
- * @zone: the zone
- *
- * Returns the zone's number of pages potentially available for dirty
- * page cache.  This is the base value for the per-zone dirty limits.
- */
 static unsigned long zone_dirtyable_memory(struct zone *zone)
 {
-	/*
-	 * The effective global number of dirtyable pages may exclude
-	 * highmem as a big-picture measure to keep the ratio between
-	 * dirty memory and lowmem reasonable.
-	 *
-	 * But this function is purely about the individual zone and a
-	 * highmem zone can hold its share of dirty pages, so we don't
-	 * care about vm_highmem_is_dirtyable here.
-	 */
 	return zone_page_state(zone, NR_FREE_PAGES) +
 	       zone_reclaimable_pages(zone) -
 	       zone->dirty_balance_reserve;
 }
 
-/**
- * zone_dirty_limit - maximum number of dirty pages allowed in a zone
- * @zone: the zone
- *
- * Returns the maximum number of dirty pages allowed in a zone, based
- * on the zone's dirtyable memory.
- */
 static unsigned long zone_dirty_limit(struct zone *zone)
 {
 	unsigned long zone_memory = zone_dirtyable_memory(zone);
