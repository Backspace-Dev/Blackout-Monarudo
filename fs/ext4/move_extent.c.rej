--- fs/ext4/move_extent.c	2013-01-04 04:01:38.000000000 -0800
+++ fs/ext4/move_extent.c	2013-03-19 04:01:02.000000000 -0700
@@ -107,15 +78,10 @@
 			return 0;
 		}
 	}
-	/* We found the last extent */
+	
 	return 1;
 }
 
-/**
- * mext_check_null_inode - NULL check for two inodes
- *
- * If inode1 or inode2 is NULL, return -EIO. Otherwise, return 0.
- */
 static int
 mext_check_null_inode(struct inode *inode1, struct inode *inode2,
 		      const char *function, unsigned int line)
@@ -136,24 +102,11 @@
 	return ret;
 }
 
-/**
- * double_down_write_data_sem - Acquire two inodes' write lock of i_data_sem
- *
- * @orig_inode:		original inode structure
- * @donor_inode:	donor inode structure
- * Acquire write lock of i_data_sem of the two inodes (orig and donor) by
- * i_ino order.
- */
 static void
 double_down_write_data_sem(struct inode *orig_inode, struct inode *donor_inode)
 {
 	struct inode *first = orig_inode, *second = donor_inode;
 
-	/*
-	 * Use the inode number to provide the stable locking order instead
-	 * of its address, because the C language doesn't guarantee you can
-	 * compare pointers that don't come from the same array.
-	 */
 	if (donor_inode->i_ino < orig_inode->i_ino) {
 		first = donor_inode;
 		second = orig_inode;
@@ -764,7 +541,7 @@
 		return -EINVAL;
 	}
 
-	/* Files should be in the same ext4 FS */
+	
 	if (orig_inode->i_sb != donor_inode->i_sb) {
 		ext4_debug("ext4 move extent: The argument files "
 			"should be in same FS [ino:orig %lu, donor %lu]\n",
@@ -861,15 +638,6 @@
 	return 0;
 }
 
-/**
- * mext_inode_double_lock - Lock i_mutex on both @inode1 and @inode2
- *
- * @inode1:	the inode structure
- * @inode2:	the inode structure
- *
- * Lock two inodes' i_mutex by i_ino order.
- * If inode1 or inode2 is NULL, return -EIO. Otherwise, return 0.
- */
 static int
 mext_inode_double_lock(struct inode *inode1, struct inode *inode2)
 {
@@ -898,14 +666,6 @@
 	return ret;
 }
 
-/**
- * mext_inode_double_unlock - Release i_mutex on both @inode1 and @inode2
- *
- * @inode1:     the inode that is released first
- * @inode2:     the inode that is released second
- *
- * If inode1 or inode2 is NULL, return -EIO. Otherwise, return 0.
- */
 
 static int
 mext_inode_double_unlock(struct inode *inode1, struct inode *inode2)
@@ -947,7 +666,7 @@
 	int block_len_in_page;
 	int uninit;
 
-	/* orig and donor should be different file */
+	
 	if (orig_inode->i_ino == donor_inode->i_ino) {
 		ext4_debug("ext4 move extent: The argument files should not "
 			"be same file [ino:orig %lu, donor %lu]\n",
@@ -963,14 +682,14 @@
 		return -EINVAL;
 	}
 
-	/* Protect orig and donor inodes against a truncate */
+	
 	ret1 = mext_inode_double_lock(orig_inode, donor_inode);
 	if (ret1 < 0)
 		return ret1;
 
-	/* Protect extent tree against block allocations via delalloc */
+	
 	double_down_write_data_sem(orig_inode, donor_inode);
-	/* Check the filesystem environment whether move_extent can be done */
+	
 	ret1 = mext_check_arguments(orig_inode, donor_inode, orig_start,
 				    donor_start, &len);
 	if (ret1)
@@ -985,7 +704,7 @@
 	if (ret1)
 		goto out;
 
-	/* Get path structure to check the hole */
+	
 	ret1 = get_ext_path(orig_inode, block_start, &holecheck_path);
 	if (ret1)
 		goto out;
