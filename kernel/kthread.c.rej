--- kernel/kthread.c	2013-01-04 04:01:33.000000000 -0800
+++ kernel/kthread.c	2013-03-19 04:00:53.000000000 -0700
@@ -275,9 +185,9 @@
 	if (work) {
 		__set_current_state(TASK_RUNNING);
 		work->func(work);
-		smp_wmb();	/* wmb worker-b0 paired with flush-b1 */
+		smp_wmb();	
 		work->done_seq = work->queue_seq;
-		smp_mb();	/* mb worker-b1 paired with flush-b0 */
+		smp_mb();	
 		if (atomic_read(&work->flushing))
 			wake_up_all(&work->done);
 	} else if (!freezing(current))
@@ -307,32 +208,18 @@
 }
 EXPORT_SYMBOL_GPL(queue_kthread_work);
 
-/**
- * flush_kthread_work - flush a kthread_work
- * @work: work to flush
- *
- * If @work is queued or executing, wait for it to finish execution.
- */
 void flush_kthread_work(struct kthread_work *work)
 {
 	int seq = work->queue_seq;
 
 	atomic_inc(&work->flushing);
 
-	/*
-	 * mb flush-b0 paired with worker-b1, to make sure either
-	 * worker sees the above increment or we see done_seq update.
-	 */
 	smp_mb__after_atomic_inc();
 
-	/* A - B <= 0 tests whether B is in front of A regardless of overflow */
+	
 	wait_event(work->done, seq - work->done_seq <= 0);
 	atomic_dec(&work->flushing);
 
-	/*
-	 * rmb flush-b1 paired with worker-b0, to make sure our caller
-	 * sees every change made by work->func().
-	 */
 	smp_mb__after_atomic_dec();
 }
 EXPORT_SYMBOL_GPL(flush_kthread_work);
